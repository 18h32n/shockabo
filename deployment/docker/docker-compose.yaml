# Docker Compose configuration for ARC Prize 2025 local development
version: '3.8'

services:
  # Main application service
  arc-app:
    build:
      context: ../..
      dockerfile: Dockerfile
      target: production
    container_name: arc-prize-app
    ports:
      - "8000:8000"  # FastAPI
      - "8001:8001"  # WebSocket
    environment:
      - ENVIRONMENT=development
      - PYTHONPATH=/app/src
      - LOG_LEVEL=DEBUG
      - DATABASE_URL=sqlite:////app/data/arc_prize.db
      - CACHE_DIR=/app/data/cache
    volumes:
      # Mount source code for development (remove in production)
      - ../../src:/app/src
      - ../../scripts:/app/scripts
      - ../../configs:/app/configs
      - ../../tests:/app/tests
      
      # Data persistence
      - arc-data:/app/data
      - arc-logs:/app/logs
      - arc-output:/app/output
      
      # Environment file
      - ../../.env:/app/.env:ro
      
    depends_on:
      - redis
      - prometheus
    networks:
      - arc-network
    restart: unless-stopped
    
    # Development overrides
    command: >
      sh -c "python -m uvicorn src.adapters.api.app:app 
             --host 0.0.0.0 
             --port 8000 
             --reload 
             --log-level debug"
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: arc-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - arc-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: arc-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - arc-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: arc-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - arc-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jupyter notebook for experimentation
  jupyter:
    build:
      context: ../..
      dockerfile: Dockerfile
      target: builder
    container_name: arc-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=arc-development
    volumes:
      - ../../notebooks:/app/notebooks
      - ../../src:/app/src
      - ../../data:/app/data
      - arc-data:/app/data
    networks:
      - arc-network
    restart: unless-stopped
    command: >
      sh -c "pip install jupyterlab && 
             jupyter lab --ip=0.0.0.0 --port=8888 --no-browser 
             --allow-root --notebook-dir=/app/notebooks"

  # Database management (optional - using SQLite by default)
  # Uncomment if you want to use PostgreSQL instead
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: arc-postgres
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     - POSTGRES_DB=arc_prize
  #     - POSTGRES_USER=arc_user
  #     - POSTGRES_PASSWORD=arc_password
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - arc-network
  #   restart: unless-stopped

  # Model serving (optional - for hosting trained models)
  # model-server:
  #   build:
  #     context: ../..
  #     dockerfile: Dockerfile
  #     target: production
  #   container_name: arc-model-server
  #   ports:
  #     - "8002:8002"
  #   environment:
  #     - ENVIRONMENT=production
  #     - MODEL_SERVER_MODE=true
  #   volumes:
  #     - arc-data:/app/data
  #     - ../../configs:/app/configs:ro
  #   networks:
  #     - arc-network
  #   restart: unless-stopped
  #   command: python -m src.adapters.api.model_server

# Named volumes for data persistence
volumes:
  arc-data:
    driver: local
  arc-logs:
    driver: local
  arc-output:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  # postgres-data:
  #   driver: local

# Custom network
networks:
  arc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16