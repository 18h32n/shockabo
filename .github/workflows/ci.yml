name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12.7"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff mypy pytest safety bandit
    
    - name: Run ruff linting
      run: |
        ruff check .
        ruff format --check .
    
    - name: Run mypy type checking
      run: |
        mypy .
    
    - name: Run pytest unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12.7
      uses: actions/setup-python@v5
      with:
        python-version: "3.12.7"
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety dependency scanning
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Run bandit security scanning
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/docker/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/arc-prize-2025:latest
          ${{ secrets.DOCKER_USERNAME }}/arc-prize-2025:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  platform-deployment:
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        platform: [kaggle, colab, paperspace]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12.7
      uses: actions/setup-python@v5
      with:
        python-version: "3.12.7"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate platform deployment script
      run: |
        python -m py_compile scripts/platform_deploy/${{ matrix.platform }}_setup.py
        echo "âœ… Platform deployment script syntax is valid"
    
    - name: Test platform compatibility
      run: |
        python scripts/platform_deploy/${{ matrix.platform }}_setup.py --validate-only
      continue-on-error: true
    
    - name: Deploy to platform (dry run)
      run: |
        echo "ðŸš€ Would deploy to ${{ matrix.platform }} platform"
        echo "Platform script: scripts/platform_deploy/${{ matrix.platform }}_setup.py"
        echo "Status: Ready for deployment"
      
  notify:
    runs-on: ubuntu-latest
    needs: [test, security, docker, platform-deployment]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployment'
        text: |
          Deployment Status: ${{ job.status }}
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          
          Test Results: ${{ needs.test.result }}
          Security Scan: ${{ needs.security.result }}
          Docker Build: ${{ needs.docker.result }}
          Platform Deployment: ${{ needs.platform-deployment.result }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: env.SLACK_WEBHOOK_URL != ''
    
    - name: Email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "ARC Prize 2025 Deployment Status: ${{ job.status }}"
        to: ${{ secrets.PROJECT_TEAM_EMAIL }}
        from: ARC Prize CI/CD
        html_body: |
          <h2>Deployment Status Report</h2>
          <p><strong>Status:</strong> ${{ job.status }}</p>
          <p><strong>Repository:</strong> ${{ github.repository }}</p>
          <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
          <p><strong>Commit:</strong> ${{ github.sha }}</p>
          
          <h3>Pipeline Results:</h3>
          <ul>
            <li>Tests: ${{ needs.test.result }}</li>
            <li>Security Scan: ${{ needs.security.result }}</li>
            <li>Docker Build: ${{ needs.docker.result }}</li>
            <li>Platform Deployment: ${{ needs.platform-deployment.result }}</li>
          </ul>
          
          <p><strong>View Details:</strong> <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">GitHub Actions</a></p>
      if: env.EMAIL_USERNAME != '' && env.EMAIL_PASSWORD != '' && env.PROJECT_TEAM_EMAIL != ''
      env:
        EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        PROJECT_TEAM_EMAIL: ${{ secrets.PROJECT_TEAM_EMAIL }}